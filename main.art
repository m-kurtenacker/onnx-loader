#[intern] fn @run_network(_image : &[&[f32]], _label : i32) -> f32;

#[export]
fn main () -> i32 {
    let num_tests = 6000;

    //let data_train = read_train();
    let data_test = read_test();

    print_string("Starting test\n");

    let mut sum = 0 as f32;
    let mut run_test = 0 as i64;
    for benchmark_cpu() {
        for i in range(0, num_tests) {
            let image_buffer = data_test(i).image_buffer;
            let image = bitcast[&[&[f32]]](image_buffer.data);

            let error = run_network(image, data_test(i).label);
            sum += error;
            run_test += 1;
            //print_i32(i);
            //print_string("\n");
        }
    }

    let final_result = sum / (run_test as f32);

    print_f32(final_result);
    print_string("\n");

    if (final_result < 0.11) {
        print_string("Result better then expected.\n");
    } else if (final_result > 0.12) {
        print_string("Result worse then expected.\n");
    }

    print_total_timing();

    0
}

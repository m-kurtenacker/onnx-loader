#[intern] fn @run_network(_manager : PassManager, _input_tensor : Tensor[f32]) -> Tensor[f32];

#[export]
fn main() -> () {
    let data = read_idx("test.idx");

    let tensor_a_buffer = data(0);

    let mut result_buffer : Buffer;

    for manager in sequential() {
        let tensor_a_t = build_tensor_f32(tensor_a_buffer, 2, @|n : i32| { match n { 0 => 4, 1 => 3, _ => 0 }});

        print_tensor_256("Test a", tensor_a_t);

        let result_tensor = run_network(manager, tensor_a_t);

        print_tensor_256("result", result_tensor);

        result_buffer = result_tensor.buffer;
    }

    write_idx("result.idx", 3, [1, 3, 4], [result_buffer]);
}

#[export]
fn main() -> () {
    let data = read_idx("test.idx");

    let tensor_a_buffer = data(0);

    let tensor_a = Tensor[f32] {
        buffer = tensor_a_buffer,
        num_dims = 2,
        size_fn = @|n : i32| { if n == 0 { 4 } else { 3 } },
        access_fn = @|a : &[i64]| { &mut (bitcast[&mut[f32]](tensor_a_buffer.data)(a(0) * 3 + a(1))) }
    };

    print_tensor_256("input a", tensor_a);

    let reshape_1_size = [2 as i64, 3 as i64, 2 as i64];
    let reshape_1 = matrix_reshape_const_f32(tensor_a, (3, reshape_1_size), reshape_1_size);

    print_tensor_256("reshape 1", reshape_1);
    *reshape_1.access_fn([1 as i64, 1 as i64, 1 as i64]) = (42 as f32) / (255 as f32);
    print_tensor_256("reshape 1.5", reshape_1);

    let reshape_2_size = [3 as i64, 4 as i64];
    let reshape_2 = matrix_reshape_const_f32(reshape_1, (2, reshape_2_size), reshape_2_size);
    //print_tensor_256("reshape 2", reshape_2);

    //let result_tensor = matrix_add(tensor_a, tensor_b, output_size);
    //print_tensor("result", result_tensor);

    write_idx("result.idx", 3, [1, 3, 4], [reshape_2.buffer]);
}

#[export]
fn main() -> () {
    let data = read_idx_byte("test.idx");

    let tensor_a = alloc_tensor_f32(2, @|n : i32| { if n == 0 { 4 } else { 3 } });
    for y in range(0, 4) {
        for x in range(0, 3) {
            *tensor_a.access_fn([y as i64, x as i64]) = ((data.data(y * 3 + x) as i32) as f32);
        }
    }

    print_tensor_256("input a", tensor_a);

    let reshape_1_size = [2 as i64, 3 as i64, 2 as i64];
    let reshape_1 = matrix_reshape_const_f32(tensor_a, (3, reshape_1_size), reshape_1_size);

    print_tensor_256("reshape 1", reshape_1);
    *reshape_1.access_fn([1 as i64, 1 as i64, 1 as i64]) = 42.0;
    print_tensor_256("reshape 1.5", reshape_1);

    let reshape_2_size = [3 as i64, 4 as i64];
    let reshape_2 = matrix_reshape_const_f32(reshape_1, (2, reshape_2_size), reshape_2_size);
    print_tensor_256("reshape 2", reshape_2);

    write_idx_float("result.idx", 3, [1, 3, 4], reshape_2.buffer);
}

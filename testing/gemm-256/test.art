#[intern] fn @load_A() -> Tensor[f32];
#[intern] fn @load_B() -> Tensor[f32];
#[intern] fn @load_C() -> Tensor[f32];

#[export]
fn main() -> () {
    let tensor_A = load_A();
    let tensor_B = load_B();
    let tensor_C = load_C();

    let size = 256 : i64;

    print_tensor("A", tensor_A);
    print_tensor("B", tensor_B);
    print_tensor("C", tensor_C);

    let output_size = (2, [size, size]);

    let setup = matrix_gemm_setup(output_size);
    let output = matrix_gemm_impl(tensor_A, tensor_B, tensor_C, output_size, setup);

    print_tensor("D", output);

    write_idx_float("result.idx", 2, [size, size], output.buffer);
}

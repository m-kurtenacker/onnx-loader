#[intern]
fn load_matrix_into_f32(tensor: Tensor[f32], file_name: &[u8], matrix_name: &[u8]) -> (fn () -> ()) {
    fn load_matrix() {
        let test = bitcast[&mut[i32]](tensor.buffer.data);
        test(0) = 0;

        let data = bitcast[&mut[f32]](tensor.buffer.data);
        load_matrix_dynamic(data, file_name, matrix_name);
    }

    load_matrix
}

#[intern]
fn load_matrix_into_i64(tensor: Tensor[i64], file_name: &[u8], matrix_name: &[u8]) -> (fn () -> ()) {
    fn load_matrix() {
        let test = bitcast[&mut[i32]](tensor.buffer.data);
        test(0) = 0;

        let data = bitcast[&mut[i64]](tensor.buffer.data);
        load_matrix_dynamic(data, file_name, matrix_name);
    }

    load_matrix
}

/*fn @get_buffer_managed(min_size: i64) = Buffer {
    data = static_alloca(min_size)(),
    size = min_size,
    device = 0
};*/
//fn @release_buffer_managed(_buffer : Buffer) { }

fn @get_buffer_dynamic(init: i64, num_elements: i64) = Buffer {
    data = bitcast[&mut[i8]](dynamic_array(init, num_elements)()),
    size = sizeof[i64]() * num_elements,
    device = 0
};

static get_buffer_managed = alloc_cpu;
static release_buffer_managed = release;

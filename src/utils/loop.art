static vector_width = 8;

fn @vector_range(body: fn(i32) -> ()) = @|start: i32, stop: i32| {
    let n = stop - start;
    if vector_width > 0 {
        let n_vec = round_down(n, vector_width);
        for i in range_step(0, n_vec, vector_width) {
            vectorize(vector_width, |j| @body(i + j + start))
        }
        for i in range(n_vec, n) {
            //vectorize(1, |j| @body(i + j + start))
            @body(i + start)
        }
    } else {
        for i in range(start, stop) {
            @body(i)
        }
    }
};

fn @vector_unroll(body: fn(i32) -> ()) = @|start: i32, stop: i32| {
    let n = stop - start;
    if vector_width > 0 {
        let n_vec = round_down(n, vector_width);
        for i in unroll_step(0, n_vec, vector_width) {
            vectorize(vector_width, |j| @body(i + j + start))
        }
        for i in unroll(n_vec, n) {
            //vectorize(1, |j| @body(i + j + start))
            @body(i + start)
        }
    } else {
        for i in unroll(start, stop) {
            @body(i)
        }
    }
};

fn @parallel_loop(body: fn(i32) -> ()) = @|n: i32| {
    if true {
        let num_threads = 4;
        for i in parallel(num_threads, 0, n) {
            @body(i)
        }
    } else {
        for i in range(0, n) {
            @body(i)
        }
    }
};

enum LoopMode {
    Sequential,
    Vectorized,
    Parallel
}

struct LoopInstance {
    manager : PassManager,
    num_dims : i32,
    index : &mut[i64],
    min : &[i64],
    max : &[i64],
    mode : &[LoopMode]
}

fn @make_loopinstance(manager : PassManager, num_dims : i32, n : &[i64]) -> LoopInstance {
    let index_buffer = manager.alloc(sizeof[i64]() * num_dims as i64);

    LoopInstance {
        manager = manager,
        num_dims = num_dims,
        index = bitcast[&mut[i64]](index_buffer.data),
        min = static_array(0 as i64, num_dims as i64),
        max = n,
        mode = static_array(LoopMode::Sequential, num_dims as i64)
    }
}

fn @multi_loop (body: fn(LoopInstance) -> ()) = @|manager: PassManager, num_dims: i32, n: &[i64]| {
    let instance = make_loopinstance(manager, num_dims, n);

    multi_loop_instanced(body, 0, num_dims, instance);
};

fn @multi_loop_vector (body: fn(LoopInstance) -> ()) = @|manager: PassManager, num_dims: i32, n: &[i64]| {
    let instance = make_loopinstance(manager, num_dims, n);

    static_array_set_element(&instance.mode(0), LoopMode::Vectorized);

    multi_loop_instanced(body, 0, num_dims, instance);
};

fn @(?current_dim & ?num_dims) multi_loop_instanced (body: fn(LoopInstance) -> (), current_dim: i32, num_dims: i32, instance : LoopInstance) -> () {
    //pe_info("Current dim", current_dim);
    if current_dim < num_dims {
        let mode = instance.mode(current_dim);

        match mode {
            LoopMode::Sequential => {
                for i in range(instance.min(current_dim) as i32, instance.max(current_dim) as i32) {
                    instance.index(current_dim) = i as i64;
                    multi_loop_instanced(body, current_dim + 1, num_dims, instance);
                }
            },
            LoopMode::Vectorized => {
                //let mut vector_buffers : [Buffer * vector_width];
                let mut vector_buffers : [Buffer * 8];

                for i in unroll(0, vector_width) {
                    let index_buffer_alloc = instance.manager.alloc(sizeof[i64]() * instance.num_dims as i64);
                    //let index_buffer_alloc = alloc_cpu(sizeof[i64]() * instance.num_dims as i64);

                    let index_buffer = bitcast[&mut[i64]](index_buffer_alloc.data);
                    for j in unroll(0, current_dim) {
                        index_buffer(j) = instance.index(j);
                    }

                    vector_buffers(i) = index_buffer_alloc;
                }

                for i in vector_range(0, (instance.max(current_dim) - instance.min(current_dim)) as i32) {
                    let index_buffer_alloc = vector_buffers(i % vector_width);
                    let index_buffer = bitcast[&mut[i64]](index_buffer_alloc.data);

                    let current_instance = LoopInstance {
                        manager = instance.manager,
                        num_dims = instance.num_dims,

                        index = index_buffer,
                        max = instance.max,
                        min = instance.min,
                        mode = instance.mode
                    };

                    current_instance.index(current_dim) = i as i64 + instance.min(current_dim);

                    multi_loop_instanced(body, current_dim + 1, num_dims, current_instance);
                }
            },

            _ =>
            @body(instance)
        }
    } else {
        @body(instance);
    }
}

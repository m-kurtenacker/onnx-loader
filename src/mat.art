/* Tensor base definition and some utils. */

enum AddrMode {
    RowMayor,
    ColMayor
}

struct Tensor[T] {
    buffer : Buffer,
    num_dims : i32,
    addr_mode: AddrMode,
    size_fn: fn(i32) -> i64,
    access_fn: fn(&[i64]) -> &mut T
}

/* TODO: find a solution for this type of casting
fn @copy_tensor_data[S, T](src: Tensor[S], dst: Tensor[T]) {
    let sizes_buffer = get_buffer_dynamic(0: i64, src.num_dims as i64);
    let sizes = bitcast[&mut [i64]](sizes_buffer.data);

    for i in unroll(0, src.num_dims) {
        sizes(i) = src.size_fn(i);
    }

    for instance in multi_loop(src.num_dims, sizes) {
        *dst.access_fn(instance.index) = *src.access_fn(instance.index) as T;
    }
}*/

/* Allocate and Release tensors, with different memory layouts as needed */

fn @build_tensor_layout[T] (buffer : Buffer, num_dims : i32, size_fn : fn(i32) -> i64, layout : AddrMode) -> Tensor[T] {
    let access_fn_col = |n : &[i64]| {
        let mut address = n(num_dims - 1);
        for i in unroll(0, num_dims - 1) {
            address = address * size_fn(num_dims - 2 - i) + n(num_dims - 2 - i);
        }
        &mut bitcast[&mut[T]](buffer.data)(address)
    };

    let access_fn_row = |n : &[i64]| {
        let mut address = n(0);
        for i in unroll(1, num_dims) {
            address = address * size_fn(i) + n(i);
        }
        &mut bitcast[&mut[T]](buffer.data)(address)
    };

    Tensor[T] {
        buffer = buffer,
        num_dims = num_dims,
        addr_mode = layout,
        size_fn = size_fn,
        access_fn = match layout {
            AddrMode::ColMayor => access_fn_col,
            AddrMode::RowMayor => access_fn_row,
        }
    }
}

fn @build_tensor[T](buffer: Buffer, num_dims: i32, size_fn : fn(i32) -> i64) = @build_tensor_layout[T](buffer, num_dims, size_fn, AddrMode::RowMayor);

//Required for ConstantTensor.py
#[intern] fn @build_tensor_u8 (buffer: Buffer, num_dims: i32, size_fn : fn(i32) -> i64) = @build_tensor[u8](buffer, num_dims, size_fn);
#[intern] fn @build_tensor_f32 (buffer: Buffer, num_dims: i32, size_fn : fn(i32) -> i64) = @build_tensor[f32](buffer, num_dims, size_fn);

fn @alloc_tensor_layout[T] (num_dims : i32, size_fn : fn(i32) -> i64, layout : AddrMode) -> Tensor[T] {
    let mut size = 1 as i64;
    for i in unroll (0, num_dims) {
        size *= size_fn(i);
    }

    let buffer = get_buffer_managed(sizeof[T]() * size);

    build_tensor_layout[T](buffer, num_dims, size_fn, layout)
}


fn @alloc_tensor[T] (num_dims : i32, size_fn : fn(i32) -> i64) = @alloc_tensor_layout[T](num_dims, size_fn, AddrMode::RowMayor);

//Required for network.py
#[intern] fn @alloc_tensor_f32 (num_dims: i32, size_fn : fn(i32) -> i64) = @alloc_tensor[f32](num_dims, size_fn);
#[intern] fn @alloc_tensor_i64 (num_dims: i32, size_fn : fn(i32) -> i64) = @alloc_tensor[i64](num_dims, size_fn);

fn release_tensor[T] (mat : Tensor[T]) -> () { release_buffer_managed(mat.buffer); }

/* For debuggung output */

static print_enable = true;
static print_verbose = false;

fn print_tensor_int[T] (name: &[u8], mat: Tensor[T], print_fn: fn(T) -> ()) -> () {
    if (print_enable) {
        print_string("Tensor ");
        print_string(name);
        print_string(" [");
        for i in range(0, mat.num_dims - 1) {
            print_i64(mat.size_fn(i));
            print_string(" x ");
        }
        print_i64(mat.size_fn(mat.num_dims - 1));
        if (!print_verbose) {
            print_string("]\n");
            return()
        }
        print_string("]:\n");

        if mat.num_dims == 1 {
            for x in range(0, mat.size_fn(0) as i32) {
                print_fn(*mat.access_fn([x as i64]));
                print_string(" ");
            }
            print_string("\n");
        } else if mat.num_dims == 2 {
            for y in range(0, mat.size_fn(0) as i32) {
                for x in range(0, mat.size_fn(1) as i32) {
                    print_fn(*mat.access_fn([y as i64, x as i64]));
                    print_string(" ");
                }
                print_string("\n");
            }
        } else if mat.num_dims == 3 {
            for chan in range(0, mat.size_fn(0) as i32) {
                print_string("chan_");
                print_i32(chan);
                print_string(":\n");

                for y in range(0, mat.size_fn(1) as i32) {
                    for x in range(0, mat.size_fn(2) as i32) {
                        print_fn(*mat.access_fn([chan as i64, y as i64, x as i64]));
                        print_string(" ");
                    }
                    print_string("\n");
                }
            }
        } else if mat.num_dims == 4 {
            for chan_out in range(0, mat.size_fn(0) as i32) {
                for chan_in in range(0, mat.size_fn(1) as i32) {
                    print_string("chan_");
                    print_i32(chan_out);
                    print_string("x");
                    print_i32(chan_in);
                    print_string(":\n");

                    for y in range(0, mat.size_fn(2) as i32) {
                        for x in range(0, mat.size_fn(3) as i32) {
                            print_fn(*mat.access_fn([chan_out as i64, chan_in as i64, y as i64, x as i64]));
                            print_string(" ");
                        }
                        print_string("\n");
                    }
                }
            }
        } else {
            print_string("Printing error: too many dimensions\n");
        }
    }
}

fn print_tensor (name: &[u8], mat: Tensor[f32]) -> () {
    @print_tensor_int[f32](name, mat, print_f32);
}

fn print_tensor_i64 (name: &[u8], mat: Tensor[i64]) -> () {
    @print_tensor_int[i64](name, mat, print_i64);
}

fn print_tensor_u8 (name: &[u8], mat: Tensor[u8]) -> () {
    @print_tensor_int[u8](name, mat, print_u8);
}

fn print_tensor_256 (name: &[u8], mat: Tensor[f32]) -> () {
    let print_scaled = @|f : f32| { print_f32(f * 255.0); };
    @print_tensor_int[f32](name, mat, print_scaled);
}

fn print_array_i64 (name: &[u8], array: &[i64], num_elements: i32) -> () {
    if (print_enable) {
        print_string("Array ");
        print_string(name);
        print_string(" [");
        print_i32(num_elements);
        print_string("]: ");
        for i in range(0, num_elements) {
            if i > 0 {
                print_string(", ");
            }
            print_i64(array(i));
        }
        print_string("\n");
    }
}

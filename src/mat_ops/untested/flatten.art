fn @matrix_flatten[T] (mat: Tensor[T], output_size: &[i64]) -> Tensor[T] {
    let new_access_fn = @|n : &[i64]| {
        let mut address = n(0);

        let oldworld_address_buffer = get_buffer_dynamic(0 : i64, mat.num_dims as i64);
        let oldworld_address = bitcast[&mut[i64]](oldworld_address_buffer.data);

        for i in unroll(0, mat.num_dims) {
            let index = address % mat.size_fn(i);
            oldworld_address(i) = index;

            address = address / mat.size_fn(i);
        }

        mat.access_fn(oldworld_address)
    };

    fn output_size_fn(n : i32) { output_size(n) };

    Tensor[T] {
        buffer = mat.buffer,
        num_dims = 1,
        size_fn = output_size_fn,
        access_fn = new_access_fn
    }
}

#[intern]
fn @matrix_flatten_f32 (_manager: PassManager, mat: Tensor[f32], output_size: &[i64]) {
    let output = @matrix_flatten[f32](mat, output_size);

    print_tensor("Flatten", output);

    output
}

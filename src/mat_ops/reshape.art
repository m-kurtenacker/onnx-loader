static print_reshape = false;

fn @matrix_reshape[T] (mat: Tensor[T], num_output_dims : i32, output_size: &[i64]) -> Tensor[T] {
    fn @output_size_fn(n : i32) -> i64 { output_size(n) }
    let new_access_fn = |n : &[i64]| {
        //Build a "linear" address with regards to the new shape.
        if print_reshape {
            print_string("input addr ");
            for i in unroll(0, num_output_dims) {
                print_i64(n(i));
                print_string(" ");
            }
            print_string("\n");
        }
        let mut address = n(0);
        for i in unroll(1, num_output_dims) {
            address = address * output_size(i) + n(i);
        }

        if print_reshape {
            print_string("address ");
            print_i64(address);
            print_string("\n");
        }

        //Unpack the address into an addressing vector for the old matrix.
        let oldworld_address_buffer = get_buffer_dynamic(0: i64, mat.num_dims as i64);
        let oldworld_address = bitcast[&mut [i64]](oldworld_address_buffer.data);

        for i in unroll(0, mat.num_dims - 1) {
            let index = address % mat.size_fn(mat.num_dims - 1 - i);
            oldworld_address(mat.num_dims - 1 - i) = index;

            address = address / mat.size_fn(mat.num_dims - 1 - i);
        }
        oldworld_address(0) = address;

        if print_reshape {
            print_string("oldworld addr ");
            for i in unroll(0, mat.num_dims) {
                print_i64(oldworld_address(i));
                print_string(" ");
            }
            print_string("\n");
        }

        mat.access_fn(oldworld_address)
    };

    Tensor[T] {
        buffer = mat.buffer,
        num_dims = num_output_dims,
        addr_mode = AddrMode::RowMayor,
        size_fn = output_size_fn,
        access_fn = new_access_fn
    }
}

#[intern]
fn @matrix_reshape_const_f32 (mat: Tensor[f32], new_shape: (i32, &[i64]), _output_size: &[i64]) -> Tensor[f32] {
    let output = @matrix_reshape[f32](mat, new_shape.0, new_shape.1);

    output
}

#[intern]
fn @matrix_reshape_f32 (mat: Tensor[f32], new_shape_tensor: Tensor[i64], output_size: &[i64]) -> Tensor[f32] {
    print_tensor_i64("new shape", new_shape_tensor);
    print_tensor("reshape input", mat);

    let output = @matrix_reshape[f32](mat, new_shape_tensor.size_fn(0) as i32, output_size);

    print_tensor("reshape output", output);

    output
}

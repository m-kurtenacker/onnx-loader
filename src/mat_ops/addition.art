//#[export] static mut time_add : i64;

fn @matrix_add_intern (matA: Tensor[f32], matB: Tensor[f32], output: Tensor[f32], output_size: &[i64]) -> () {
    //let start = get_micro_time();

    for instance in multi_loop (matA.num_dims, output_size) {
        let A = *matA.access_fn(instance.index);
        let B = *matB.access_fn(instance.index);

        *output.access_fn(instance.index) = A + B;
    }

    //time_add += get_micro_time() - start;
}

#[intern]
fn @matrix_add (matA: Tensor[f32], matB: Tensor[f32], output_size: &[i64]) -> Tensor[f32] {
    fn @output_size_fn(n : i32) -> i64 { output_size(n) }

    let output = @alloc_tensor[f32](matA.num_dims, output_size_fn);

    matrix_add_intern (matA, matB, output, output_size);

    print_tensor("Addition", output);

    output
}

#[import(cc = "C", name = "read_train_labels")] fn read_train_labels(_labels: &mut &[i32]) -> ();
#[import(cc = "C", name = "read_train_images")] fn read_train_images(_image_data: &mut &[u8]) -> ();
#[import(cc = "C", name = "read_test_labels")] fn read_test_labels(_labels: &mut &[i32]) -> ();
#[import(cc = "C", name = "read_test_images")] fn read_test_images(_image_data: &mut &[u8]) -> ();


struct image_item {
    image_buffer: Buffer,
    label: i32
}

fn read_train() -> &[image_item] {
    let mut labels: &[i32];
    let labelspp = &mut labels;
    read_train_labels(labelspp);

    let mut images: &[u8];
    let imagespp = &mut images;
    read_train_images(imagespp);

    let t = runtime_alloc(0,sizeof[image_item]() * 60000);
    let items = bitcast[&mut[image_item]](t);

    for i in range(0, 60000) {
        items(i).label = labels(i);
    }

    for i in range(0, 60000) {
        /*let mut histogram : [i32 * 256];

        for j in range(0, 256) {
            histogram(j) = 0;
        }

        let mut mean = 0 as f32;
        for x in range(0, 28) {
            for y in range(0, 28) {
                let data = images(i * 28 * 28 + y * 28 + x);

                histogram(data) += 1;
                mean += data as f32;
            }
        }
        mean = mean / (28 * 28);

        let mut stddev = 0 as f32;
        for j in range(0, 256) {
            let data = histogram(j);

            let distance = mean - j as f32;
            let distance_sqr = distance * distance;
            
            stddev += distance_sqr;
        }
        stddev = math_builtins::sqrt(stddev / (28 * 28))*/

        let mean = 0.1307 as f32;
        let stddev = 0.3081 as f32;

        items(i).image_buffer = alloc_cpu(sizeof[&[f32]]() * 28 * 28);
        let image = bitcast[&mut[f32]](items(i).image_buffer.data);
        for x in range(0, 28) {
            for y in range(0, 28) {
                image(y * 28 + x) = images(i * 28 * 28 + y * 28 + x) as f32 / 255.0;
                //image(y * 28 + x) = ((images(i * 28 * 28 + y * 28 + x) as f32 / 255.0) - mean) / stddev;
            }
        }
    }

    items
}

//void read_images(char * filename, char ** images);
#[import(cc = "C", name = "read_images")] fn read_images(_filename: &[u8], _image_data: &mut &[u8]) -> ();

fn read_test() -> &[image_item] {
    let mut images: &[u8];
    let imagespp = &mut images;
    //read_images("/home/matthiask/Documents/test/networks/onnx-model-zoo/validated/vision/body_analysis/age_gender/dependencies/data.ubyte", imagespp);
    //read_images("/home/matthias/Documents/test/networks/onnx-models/onnx-model-zoo/validated/vision/body_analysis/age_gender/dependencies/data.ubyte", imagespp);
    read_images("/home/matthias/Documents/DFKI/test/networks/onnx-loader/mnist-data/t10k-images-idx3-ubyte", imagespp);

    let t = runtime_alloc(0, sizeof[image_item]() * 1);
    let items = bitcast[&mut[image_item]](t);

    for i in range(0, 1) {
        items(i).label = 0;

        items(i).image_buffer = alloc_cpu(sizeof[&[f32]]() * 224 * 224 * 3);
        let image = bitcast[&mut[f32]](items(i).image_buffer.data);
        for x in range(0, 224) {
            for y in range(0, 224) {
                for chan in range(0, 3) {
                    image(chan + 3 * (y * 224 + x)) = images(i * 224 * 224 * 3 + (y * 224 + x) * 3 + chan) as f32 / 255.0;
                }
            }
        }
    }

    items
}

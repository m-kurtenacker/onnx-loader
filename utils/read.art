//#[import(cc = "C", name = "read_train_labels")] fn read_train_labels(_labels: &mut &[i32]) -> ();
//#[import(cc = "C", name = "read_train_images")] fn read_train_images(_image_data: &mut &[u8]) -> ();
//#[import(cc = "C", name = "read_test_labels")] fn read_test_labels(_labels: &mut &[i32]) -> ();
//#[import(cc = "C", name = "read_test_images")] fn read_test_images(_image_data: &mut &[u8]) -> ();

struct image_item {
    image_buffer: Buffer,
    label: i32
}

//fn read_train() -> &[image_item] {
//    let mut labels: &[i32];
//    let labelspp = &mut labels;
//    read_train_labels(labelspp);
//
//    let mut images: &[u8];
//    let imagespp = &mut images;
//    read_train_images(imagespp);
//
//    let t = runtime_alloc(0,sizeof[image_item]() * 60000);
//    let items = bitcast[&mut[image_item]](t);
//
//    for i in range(0, 60000) {
//        items(i).label = labels(i);
//    }
//
//    for i in range(0, 60000) {
//        /*let mut histogram : [i32 * 256];
//
//        for j in range(0, 256) {
//            histogram(j) = 0;
//        }
//
//        let mut mean = 0 as f32;
//        for x in range(0, 28) {
//            for y in range(0, 28) {
//                let data = images(i * 28 * 28 + y * 28 + x);
//
//                histogram(data) += 1;
//                mean += data as f32;
//            }
//        }
//        mean = mean / (28 * 28);
//
//        let mut stddev = 0 as f32;
//        for j in range(0, 256) {
//            let data = histogram(j);
//
//            let distance = mean - j as f32;
//            let distance_sqr = distance * distance;
//            
//            stddev += distance_sqr;
//        }
//        stddev = math_builtins::sqrt(stddev / (28 * 28))*/
//
//        let mean = 0.1307 as f32;
//        let stddev = 0.3081 as f32;
//
//        items(i).image_buffer = alloc_cpu(sizeof[&[f32]]() * 28 * 28);
//        let image = bitcast[&mut[f32]](items(i).image_buffer.data);
//        for x in range(0, 28) {
//            for y in range(0, 28) {
//                image(y * 28 + x) = images(i * 28 * 28 + y * 28 + x) as f32 / 255.0;
//                //image(y * 28 + x) = ((images(i * 28 * 28 + y * 28 + x) as f32 / 255.0) - mean) / stddev;
//            }
//        }
//    }
//
//    items
//}

#[import(cc = "C", name = "read_cmake_labels")] fn read_labels(_labels: &mut &[i32]) -> ();
#[import(cc = "C", name = "read_cmake_images")] fn read_images(_image_data: &mut &[u8]) -> ();

fn read_data() -> &[image_item] {
    let mut labels: &[i32];
    let labelspp = &mut labels;
    read_labels(labelspp);

    let mut images: &[u8];
    let imagespp = &mut images;
    read_images(imagespp);

    let t = runtime_alloc(0,sizeof[image_item]() * 60000);
    let items = bitcast[&mut[image_item]](t);

    for i in range(0, 60000) {
        items(i).label = labels(i);
    }

    for i in range(0, 60000) {
        //let mean = 0.1307 as f32;
        //let stddev = 0.3081 as f32;

        items(i).image_buffer = alloc_cpu(sizeof[&[f32]]() * 28 * 28);
        let image = bitcast[&mut[f32]](items(i).image_buffer.data);
        for x in range(0, 28) {
            for y in range(0, 28) {
                image(y * 28 + x) = images(i * 28 * 28 + y * 28 + x) as f32 / 255.0;
                //image(y * 28 + x) = ((images(i * 28 * 28 + y * 28 + x) as f32 / 255.0) - mean) / stddev;
            }
        }
    }

    items
}

#[import(cc = "C", name = "read_idx")] fn read_idx_cpp(_filename: &[u8], _data: &mut &[u8]) -> &[i64];

fn read_idx(filename : &[u8]) -> &[Buffer] {
    let mut images: &[u8];
    let imagespp = &mut images;
    let sizes = read_idx_cpp(filename, imagespp);

    let t = alloc_cpu(sizeof[Buffer]() * sizes(0));
    let items = bitcast[&mut[Buffer]](t.data);

    for i in range(0, sizes(0) as i32) {
        items(i) = alloc_cpu(sizeof[&[f32]]() * sizes(1) * sizes(2));

        let image = bitcast[&mut[f32]](items(i).data);
        
        for j in range(0, (sizes(1) * sizes(2)) as i32) {
            image(j) = images(j + i * (sizes(1) * sizes(2)) as i32) as f32 / 256.0;
        }
    }

    items
}

#[import(cc = "C", name = "write_idx")] fn write_idx_cpp(_filename: &[u8], _dims: &[i64], _data: &[u8]) -> ();

fn write_idx(filename : &[u8], num_dims : i32, dims : &[i64], items : &[Buffer]) -> () {
    let mut total_size = 1 : i64;
    for i in range(0, num_dims) {
        total_size *= dims(i);
    }

    let images_buffer = alloc_cpu(sizeof[u8]() * total_size);
    let dims_buffer = alloc_cpu(sizeof[i64]() * (num_dims + 1) as i64);

    let local_dims = bitcast[&mut[i64]](dims_buffer.data);
    for i in range(0, num_dims) {
        local_dims(i) = dims(i);
    }
    local_dims(num_dims) = 0; //Terminator for C.

    let images = bitcast[&mut[u8]](images_buffer.data);

    for i in range(0, dims(0) as i32) {
        let current_item = items(i);
        let current_data = bitcast[&[f32]](current_item.data);
        
        for j in range(0, (dims(1) * dims(2)) as i32) {
            images(j + i * (dims(1) * dims(2)) as i32) = (current_data(j) * 256.0) as u8;
        }
    }

    write_idx_cpp (filename, local_dims, images);
}

fn @matrix_concat4[T] (manager: PassManager, mat1: Tensor3[T], mat2: Tensor3[T], mat3: Tensor3[T], mat4: Tensor3[T], output_size: &[i64]) -> Tensor3[T] {
    let output_size_fixed = [output_size(0), output_size(1), output_size(2)];

    let new_access_fn = |n : [i64 * 3]| {
        let mut address : [i64 * 3];

        for i in unroll(0, 4) {
            address(i) = n(i);
        }

        if address(3) < mat1.size(3) {
            mat1.access_fn(address)
        } else {
            address(3) -= mat1.size(3);

            if address(3) < mat2.size(3) {
                mat2.access_fn(address)
            } else {
                address(3) -= mat2.size(3);

                if address(3) < mat3.size(3) {
                    mat3.access_fn(address)
                } else {
                    address(3) -= mat3.size(3);

                    mat4.access_fn(address)
                }
            }
        }

    };

    Tensor3[T] {
        buffer = mat1.buffer, //TODO: Remove buffer from tensors, manage this elsewere.
        size = output_size_fixed,
        access_fn = new_access_fn
    }
}

#[intern]
fn @matrix_concat4_f32 (manager: PassManager, mat1: Tensor3[f32], mat2: Tensor3[f32], mat3: Tensor3[f32], mat4: Tensor3[f32], output_size: &[i64]) = @matrix_concat4[f32] (manager, mat1, mat2, mat3, mat4, output_size);

fn @matrix_concat2[T] (manager: PassManager, mat1: Tensor3[T], mat2: Tensor3[T], output_size: &[i64]) -> Tensor3[T] {
    let output_size_fixed = [output_size(0), output_size(1), output_size(2)];

    let new_access_fn = |n : [i64 * 3]| {
        let mut address : [i64 * 3];

        for i in unroll(0, 4) {
            address(i) = n(i);
        }

        if address(3) < mat1.size(3) {
            mat1.access_fn(address)
        } else {
            address(3) -= mat1.size(3);

            mat2.access_fn(address)
        }

    };

    Tensor3[T] {
        buffer = mat1.buffer, //TODO: Remove buffer from tensors, manage this elsewere.
        size = output_size_fixed,
        access_fn = new_access_fn
    }
}

#[intern]
fn @matrix_concat2_f32 (manager: PassManager, mat1: Tensor3[f32], mat2: Tensor3[f32], output_size: &[i64]) = @matrix_concat2[f32] (manager, mat1, mat2, output_size);

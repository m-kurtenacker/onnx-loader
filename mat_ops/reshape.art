fn @matrix_reshape[T] (manager: PassManager, mat: Tensor3[T], new_size: [i64 * 1]) -> Tensor1[T] {
    let new_access_fn = |n : [i64 * 1]| {
        //Build a "linear" address with regards to the new shape.
        let mut address = n(2);
        for i in unroll(0, 2) {
            address = address * new_size(1 - i) + n(1 - i);
        }

        //Unpack the address into an addressing vector for the old matrix.
        //let oldworld_address_buffer = manager.alloc_dynamic(0: i64, mat.num_dims as i64);
        //let oldworld_address = bitcast[&mut [i64]](oldworld_address_buffer.data);
        let mut oldworld_address : [i64 * 3];

        for i in unroll(0, 3) {
            let index = address % mat.size(i);
            oldworld_address(i) = index;

            address = address / mat.size(i);
        }

        mat.access_fn(oldworld_address)
    };

    Tensor1[T] {
        buffer = mat.buffer,
        size = new_size,
        access_fn = new_access_fn
    }
}

#[intern]
fn @matrix_reshape_const_f32 (manager: PassManager, mat: Tensor3[f32], new_shape: (i32, &[i64]), _output_size: &[i64]) -> Tensor1[f32] {
    let new_shape_fixed = [ new_shape.1(0) ];

    let output = @matrix_reshape[f32](manager, mat, new_shape_fixed);

    output
}

#[intern]
fn @matrix_reshape_f32 (manager: PassManager, mat: Tensor3[f32], new_shape_tensor: Tensor1[f32], _output_size: &[i64]) -> Tensor1[f32] {
    //let new_shape = [*new_shape_tensor.access_fn([0]) as i64];
    let new_shape = [1024 as i64];

    let output = @matrix_reshape[f32](manager, mat, new_shape);

    output
}

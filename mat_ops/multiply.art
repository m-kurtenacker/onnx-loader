#[export] static mut time_mul : i64;

#[intern]
fn @matrix_multiply (manager: PassManager, input: Tensor[f32], mat: Tensor[f32], output_size: &[i64]) -> Tensor[f32] {
    let start = get_micro_time();

    fn @output_size_fn(n : i32) -> i64 { output_size(n) }
    let output = @alloc_tensor_layout[f32](manager, 3, output_size_fn, AllocLayout::RCK);

    for i in range(0, output.size_fn(0) as i32) {
        let mut sum = 0 as f32;
        for k in range(0, input.size_fn(0) as i32) {
            sum += (*input.access_fn([k as i64])) * (*mat.access_fn([k as i64, i as i64]))
        }
        *output.access_fn([i as i64]) = sum;
    }

    time_mul += get_micro_time() - start;

    output
}

#[export] static mut time_max_pool : i64;

#[intern]
fn @matrix_max_pool (manager: PassManager, input: Tensor[f32], output_size: &[i64], shape: &[i64], stride: &[i64], padding: &[i64]) -> Tensor[f32] {
    let start = get_micro_time();

    fn @output_size_fn(n : i32) -> i64 { output_size(n) }
    let output = @alloc_tensor_layout[f32](manager, 3, output_size_fn, AllocLayout::RCK);

    for inst_out in multi_loop(manager, 3, output_size) {
        let mut input_dims : [i64 * 3];

        let chanel = inst_out.index(2);
        input_dims(2) = chanel;

        let mut max = - (1.0 : f32) / (0.0 : f32); // == -inf in normal floating point math.

        for kernel_instance in multi_loop(manager, 2, shape) {
            for i in unroll(0, 2) {
                input_dims(i) = inst_out.index(i) * stride(i) - padding(i) + kernel_instance.index(i);
                if input_dims(i) < 0 {
                    input_dims(i) = 0;
                }
                if input_dims(i) >= input.size_fn(i) {
                    input_dims(i) = input.size_fn(i) - 1;
                }
            }

            let data = *input.access_fn(input_dims);
            max = math_builtins::fmax(max, data);
        }

        let index_fixed = [inst_out.index(0), inst_out.index(1), inst_out.index(2)];
        *output.access_fn(index_fixed) = max;
    }

    time_max_pool += get_micro_time() - start;

    output
}

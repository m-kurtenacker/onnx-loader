#[intern]
fn @matrix_avg_pool (manager: PassManager, input: Tensor3[f32], output_size: &[i64], shape: &[i64], stride: &[i64], padding: &[i64]) -> Tensor3[f32] {
    /* input shape:  [ X x Y x chan ]
       ~output shape: [ X/xk x Y/yk x chan ]
    */

    let output_size_fixed = [output_size(0), output_size(1), output_size(2)];
    let output = @alloc_tensor_layout_3[f32](manager, output_size_fixed, AllocLayout::RCK);

    let mut kernel_size = 1 : i64;
    for index in unroll(0, 2) {
        kernel_size *= shape(index);
    }

    for inst_out in multi_loop(manager, 3, output_size) {
        let mut input_dims : [i64 * 3];

        let chanel = inst_out.index(2);
        input_dims(2) = chanel;

        let mut sum = 0 : f32;

        for kernel_instance in multi_loop(manager, 2, shape) {
            for i in unroll(0, 2) {
                input_dims(i) = inst_out.index(i) * stride(i) - padding(i) + kernel_instance.index(i);
                if input_dims(i) < 0 {
                    input_dims(i) = 0;
                }
                if input_dims(i) >= input.size(i) {
                    input_dims(i) = input.size(i) - 1;
                }
            }

            let data = *input.access_fn(input_dims);

            sum += data;
        }

        let index_fixed = [inst_out.index(0), inst_out.index(1), inst_out.index(2)];
        *output.access_fn(index_fixed) = sum / (kernel_size as f32);
    }

    output
}

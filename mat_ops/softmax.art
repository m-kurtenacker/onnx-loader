fn @matrix_softmax (manager: PassManager, mat: Tensor[f32]) {
    let output = @alloc_tensor[f32](manager, mat.num_dims, mat.size_fn);

    let mut sum = 0 as f32;
    let sump = &mut sum;

    let dims_buffer = manager.alloc(sizeof[i64]() * mat.num_dims as i64);
    let dims = bitcast[&mut [i64]](dims_buffer.data);
    for index in range(0, mat.num_dims) {
        dims(index) = mat.size_fn(index);
    }

    for instance in multi_loop (manager, mat.num_dims, dims) {
        let data = math_builtins::exp(*mat.access_fn(instance.index));
        *output.access_fn(instance.index) = data;
        atomic[f32](11, sump, data, 7, "");
    }

    for instance in multi_loop (manager, mat.num_dims, dims) {
        let data = *output.access_fn(instance.index);
        *output.access_fn(instance.index) = data / sum;
    }

    manager.release(dims_buffer);

    output
}

#[intern]
fn @matrix_softmax_f32 (manager: PassManager, mat: Tensor[f32]) = @matrix_softmax(manager, mat);

fn @matrix_log_softmax (manager: PassManager, mat: Tensor[f32]) {
    let output = @alloc_tensor[f32](manager, mat.num_dims, mat.size_fn);

    let mut sum = 0 as f32;
    //let sump = &mut sum;

    /*let dims_buffer = manager.alloc(sizeof[i64]() * mat.num_dims as i64);
    let dims = bitcast[&mut [i64]](dims_buffer.data);
    for index in range(0, mat.num_dims) {
        dims(index) = mat.size_fn(index);
    }

    for instance in multi_loop (manager, mat.num_dims, dims) {
        let data = math_builtins::exp(*mat.access_fn(instance.index));
        *output.access_fn(instance.index) = data;
        //atomic[f32](11, sump, data, 7, "");
        sum += data;
    }

    for instance in multi_loop (manager, mat.num_dims, dims) {
        let data = *output.access_fn(instance.index);
        *output.access_fn(instance.index) = math_builtins::log(data / sum);
    }*/
    for i in range (0, 10) {
        let data = math_builtins::exp(*mat.access_fn([i as i64]));
        *output.access_fn([i as i64]) = data;
        sum += data;
    }

    for i in range (0, 10) {
        let data = *output.access_fn([i as i64]);
        *output.access_fn([i as i64]) = math_builtins::log(data / sum);
    }

    //manager.release(dims_buffer);

    output
}

#[intern]
fn @matrix_log_softmax_f32 (manager: PassManager, mat: Tensor[f32]) = @matrix_log_softmax(manager, mat);
